pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
	poke(0x5f2e,1)
	poke(0x5f33,1)
	
	near_z=0.1
	far_z=25

	objects={}
	drawables={}
	
	bg_change_cr=nil
	
	mtn_seed=33
	
	cloud_pattern=make_pattern()
	shuffle(cloud_pattern)
	
	car=add(drawables,{
		x=0,y=0,z=5,
		def=car_def
	})
	
	for i=1,25 do
		local treew=1.4
		local tree=add(drawables,{
			x=(i%2)*treew*2-treew+rnd(0.2)-0.1,
			y=0.5,
			z=25-i,
			def=tree_def
		})
		add(objects,trees)
	end
	
	local barrier=add(drawables,{
		x=0,y=0,z=25,
		def=barrier_def
	})
	add(objects,barrier)
	
	cam_x=0
	cam_y=1
end

function change_bg()
	fog_rate=0.019

	while fog_f<1 do
		fog_f+=fog_rate
		yield()
	end
	
	fog_f=1
	
	mtn_seed=flr(rnd(32767))
	
	for i=1,60 do
		yield()
	end
	
	while fog_f>0 do
		fog_f-=fog_rate
		yield()
	end
	
	fog_f=0
end

function _update60()
	if bg_change_cr and costatus(bg_change_cr)~="dead" then
		coresume(bg_change_cr)
	else
		bg_change_cr=nil
	end
	
	if btnp(4) then
		bg_change_cr=cocreate(change_bg)
	end

	foreach(objects,
		function(self)
			self.z-=0.15/2
			local iy=ilerp(25,0,self.z)
			--self.y=iy*0.5
			if self.z<0 then
				self.z+=25
				self.flag=1
			end
		end)
		
	for self in all(objects) do
		if self.flag==1 then
			move(objects,self,1)
			self.flag=0
			break
		end
	end
end

function _draw()
	pal(14,128+10,1)
	pal(15,128+11,1)
	pal(2,128+12,1)
	pal(10,128+13,1)
	cls(14)
	
	rectfill(0,0,127,64,12)
--	rectfill(0,65,127,127,15)
	
	-- mountains
	srand(mtn_seed)
	for m=16,1,-1 do
		local mx=rnd(128)
		local mxx=mx+sin(t()+rnd())*(m/16)*12
		local mh=16+rnd(54*(m/16))
		local edge=-8+rnd(16)
		for x=-26,25 do
			local c=13
			if (x<edge) c=1
			line(mxx,64-mh,mx+x,64,c)
		end
	end
	
	fog_f=fog_f or 0
	
	pattern_fade(cloud_pattern,fog_f)
	palt(7,false)
	rectfill(0,0,127,64,0x76)
	palt()
	fillp()

	-- road	
	local rw0=38
	local rw1=6

	for x=-rw0,rw0-1 do
		local i=(x+rw0)/(rw0*2-1)
		local xx=(rw1-1)*i-flr(rw1/2)
		line(x+64,127,64+xx,65,5)
	end
	for i=1,8 do
		local y=65+((i*8+t()*64)%63)
--		line(64,y,64,y+3,7)
	end
--	line(63,0,63,127,7)
--	line(64,0,64,127,7)
	
	foreach(drawables,
		function(self)
			local def=self.def or {}
			spr3d(self.x,self.y,self.z,
				def.sp,
				def.sw,
				def.sh,
				def.sclx,
				def.scly,
				cam_x,cam_y)
		end)
		
	-- car
	if blink(0.25) then
		pal(6,7)
		pal(7,6)
	end
	spr(1,64-8+sin(t()/3)*4,96+cos(t()/6.3)*2,2,2)
	
	pal(6,6)
	pal(7,7)
	
--	print(band(stat(1)*100,0xff).."%",0,0)
--	print(band(stat(2)*100,0xff).."%",0,6)
end

function spr3d(x,y,z,sp,sw,sh,sclx,scly,cam_x,cam_y)
	x=x or 0
	y=y or 0
	z=z or 1
	
	if z<near_z or z>far_z then
		return
	end

	-- invert y space	
	y=-y

	sp=sp or 0
	sw=sw or 1
	sh=sh or 1
	sclx=sclx or 1
	scly=scly or 1
	cam_x=cam_x or 0
	cam_y=cam_y or 0
	
	x+=cam_x
	y+=cam_y
	
	-- sprite sheet sprite coordinates
	local sx=sp%16
	local sy=flr(sp/16)
	
	-- sprite sheet pixel coordinates
	local spx=sx*8
	local spy=sy*8
	
	local spw=sw*8
	local sph=sh*8
	
	local hw=sw/2*sclx
	local hh=sh/2*scly

	local wx0,wy0=(x-hw)/z,
		(y-hh)/z
	local wx1,wy1=(x+hw)/z,
		(y+hh)/z
	
	local tx=function(w)
		return w*64+64
	end
	
	local scrx0,scry0=tx(wx0),tx(wy0)
	local scrx1,scry1=tx(wx1),tx(wy1)
	
	local scrw=scrx1-scrx0
	local scrh=scry1-scry0

	sspr(spx,spy,spw,sph,
		scrx0,scry0,scrw,scrh)
end

function blink(ivl,tt)
	tt=tt or t()
	return flr((tt*2)/ivl)%2==0
end

tree_def={
	sp=32,sw=2,sh=2,sclx=1,scly=1
}

barrier_def={
	sp=8,sw=1,sh=1,
	sclx=0.5,scly=0.5
}

cone_def={
	sp=9,sw=1,sh=1,sclx=1,scly=1
}

car_def={
	sp=1,sw=2,sh=2,
	sclx=0.5,scly=0.5
}
-->8
function pattern_fade(pattern,f)
	local fp=0xffff
	for i=1,flr(mid(f,0,1)*17) do
		fp=band(fp,bnot(shl(1,pattern[i])))
	end
	fillp(fp+0.8)
end

function make_pattern()
	local ret={}
	for i=1,16 do
		add(ret,i)
	end
	return ret
end

function shuffle(a)
	local n=#a
	for i=n,2,-1 do
		local j=flr(rnd(i))+1
		a[i],a[j]=a[j],a[i]
	end
	return a
end

function move(arr,elem,idx)
	local n=#arr
	local found=nil
	for i=1,n do
		if arr[i]==elem then
			found=i
			break
		end
	end
	
	if not found then return end
	
	if found==idx then
		return
	elseif found>idx then
		for i=found-1,idx,-1 do
			arr[i+1]=arr[i]
		end
	elseif found<idx then
		for i=found+1,idx do
			arr[i-1]=arr[i]
		end
	end
	
	arr[idx]=elem
end

function lerp(a,b,t)
	return (b-a)*t+a
end

function ilerp(a,b,c)
	return (c-a)/(b-a)
end

function swap(a,i0,i1)
	local t=a[i0]
	a[i0]=a[i1]
	a[i1]=t
end

function sift(a,p,n)
	n=n or #a
	local v=a[p]
	local m=p*2+1
	while m<=n do
		if (
	end
end

function sort(a,n)
	n=n or #a
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000002c000000000000000000000000000000000000000000000000898989000066000000000000000000000000000000000000000000000000000
00700700000000222c00000000000000000000000000000000000000000000000060060000099000000000000000000000000000000000000000000000000000
000770000000022112c0000000000000000000000000000000000000000000000898989000099000000000000000000000000000000000000000000000000000
0007700000062211112c600000000000000000000000000000000000000000000060060000099000000000000000000000000000000000000000000000000000
007007000007211cc112700000000000000000000000000000000000000000000000000000099000000000000000000000000000000000000000000000000000
00000000000221222c12100000000000000000000000000000000000000000000000000000099000000000000000000000000000000000000000000000000000
0000000000012222222cc00000000000000000000000000000000000000000000000000000999900000000000000000000000000000000000000000000000000
00000000000111222211100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001122222222cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002221222212220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006662222226660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007770000007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006660000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000003f000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000bf00000000000000bf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000ffb3000000000000ffb3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000f3bb000000000000f3bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000033bbf3000000000033bbf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000f3fbbf0000000000f3fbbf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000b33ffbf300000000b33ffbf30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000bbbff3ff00000000bbbff3ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f3fbbfbbf3000000f3fbbfbbf3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f3fffffbbf000000f3fffffbbf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003f3ffff3bb0000003f3ffff3bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0003ff3f33ffb0000003ff3f33ffb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000f33fffff00000000f33fffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000ff33fb0000000000ff33fb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000004400000000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
