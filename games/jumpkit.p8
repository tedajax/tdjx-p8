pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

function _init()
	actors={}
	
	local add_actor=function(p)
		return add(actors,
			actor:new(p))
	end

	player=add_actor({x=8,y=15})
	

	for xx=0,127 do
		for yy=0,63 do
			local m=mget(xx,yy)
			if fget(m,7) and false then
				add_actor({
					x=xx+1/2,y=yy+1,sp=m,
					k_max_move=4,
					inp={x=1,y=0,bx=false,by=false},
					on_wall=function(self)
						self.inp.x=-self.inp.x
					end})
				mset(xx,yy,0)
			end
		end
	end
	
	init_entities(0,0,16,16)
end

--function _update() dt=1/30; update(dt) end
function _update60() dt=1/60; update(dt) end

function update(dt)
	jk_update()
	
	local ix,iy=0,0
	if (btn(0)) ix-=1
	if (btn(1)) ix+=1
	if (btn(2)) iy-=1
	if (btn(3)) iy+=1
	
	local bts={btnp(4),btnp(5),btn(4),btn(5)}
	
	if not player:getf(af.dead) then
 	player.inp.x=ix
 	player.inp.y=iy
 	local bt=0
 	for i=1,#bts do
 		if bts[i] then
 			bt+=shl(1,i-1)
 		end
 	end
 	player.inp.btns=bt
 else
 	player.inp.x=0
 	player.inp.y=0
 	player.inp.btns=0
 end
 
	tick_entities(dt)
	
	foreach(actors,function(a)
		a:move(dt)
	end)
		
	watch("pos:"..player.x..","..player.y)
	watch("vel:"..player.dx/dt..","..player.dy/dt)
end

function _draw()
	cls()
	
	map(0,0,0,0,16,16,127)
	
	foreach(actors,function(a)
 	local sx,sy=w2s(a.x,a.y)
 	local sp=a.sp
 	if a:getf(af.dead) then
 		sp+=16
 	end
 	
 	spr(sp,sx-4,sy-8,1,1,a.face<0)
--[[ 	rect(sx-a.w*8,sy-a.h*8,
 		sx+a.w*8,sy,11)
 	pset(sx,sy,8)]]
 end)
 
 map(0,0,0,0,16,16,128)
	
	draw_log()
	draw_watch()
end
-->8
-- actors

-- actor flags
af={
	grounded=shl(1,0),
	platdrop=shl(1,1),
	dead=shl(1,2),
}

actor={
	x=0,y=0,					-- position
	dx=0,dy=0,			-- velocity
	ddx=0,ddy=2,	-- acceleration
	w=0.2,h=0.5, -- half width/height
	sp=1,
	face=1,
	flags=0,
	jumps=0,
	mass=1,
	drag=0,
	t_air=0,
	t_jump_hold=0,
	k_coldst=0.3, -- collision check distance
	k_scndst=0.1, -- scan distance while searching for contact point
	k_bounce_wall=0,
	k_bounce_floor=0,
	k_jump_force=24,
	k_max_move=8,
	k_jump_forgive_t=5/60,
	k_jump_hold_t=1/2,
	k_jump_hold_force=1,
	k_jump_hold_delay=5/60,
}

function actor:premove()
end

function actor:postmove()
end

function actor:kill()
	self:setf(af.dead,true)
end

function actor:jump(dt)
	local f=min(self.k_jump_force*dt,1)
	self.dy=-f
end

function actor:force(fx,fy)
	local m=max(self.mass,0.01)
	self.dx+=fx/m*dt
	self.dy+=fy/m*dt
end

function actor:friction(fx,fy)
	fx=mid(fx,0,1)
	fy=mid(fy,0,1)
	self.dx=self.dx*(1-fx)
	self.dy=self.dy*(1-fy)
end

function actor:linfric(fx,fy)
	self.dx=moveto(self.dx,0,fx*dt)
	self.dy=moveto(self.dy,0,fy*dt)
end

function actor:control(dt)
	
end

function actor:on_wall() end

function actor:move(dt)
	-- apply inputs
	local accel=64*dt
	if not self:getf(af.grounded) then
		accel=shr(accel,1)
	end
	
	self:setf(af.platdrop,self.inp.y>0)
	local stand=self:getf(af.grounded)
	
	if self.inp.x<0 then
		self.dx-=accel*dt
		self.face=-1
	elseif self.inp.x>0 then
		self.dx+=accel*dt
		self.face=1
	else
		local a=accel
		if (not stand) a/=2
		self.dx=moveto(self.dx,0,a*dt)
	end

	if stand then	
		self.jumps=0
	end
	
	local canjump=stand
		or self.jumps<0
		or (not stand
						and self.t_air<self.k_jump_forgive_t)

	canjump=canjump and not self:getf(af.dead)
		
	local jumpreq=band(self.inp.btns,1)~=0
	local jumphold=band(self.inp.btns,4)~=0
		
	if jumpreq and canjump then
		self:jump(dt)
		--player:force(0,-18)
		self.jumps+=1
	end
	
	if not stand
		and jumphold
		and self.t_jump_hold<self.k_jump_hold_t+self.k_jump_hold_delay
	then
		self.t_jump_hold+=dt
		if self.t_jump_hold>=self.k_jump_hold_delay then
			self.dy-=self.k_jump_hold_force*dt
		end
	elseif stand then
		self.t_jump_hold=0
	end

	-- do physics
	self:setf(af.grounded,false)
	
	self.dx+=self.ddx*dt
	self.dy+=self.ddy*dt
	
	local max_x,max_y=
		self.k_max_move*dt,30*dt
	self.dx=mid(self.dx,-max_x,max_x)
	self.dy=mid(self.dy,-max_y,max_y)
	
	-- x movement
	local nx=self.x+
		self.dx+sgn(self.dx)*self.k_coldst
		
	if map_kill(nx,self.y-self.h)
	then
		self:kill()
	end
		
	if not solid(nx,self.y-self.h) then
		-- no contact, move normally
		self.x+=self.dx
	else
		-- hit solid
		-- find contact point
		while not solid(
			self.x+sgn(self.dx)*self.k_coldst,
			self.y-0.5)
		do
			self.x+=sgn(self.dx)*self.k_scndst
		end
		
		-- bounce
		self.dx*=-self.k_bounce_wall
		
		self:on_wall()
	end

	-- y movement	
	local left,right=
		self.x-self.w,self.x+self.w

	if self.dy<0 then
		if map_kill(left,self.y+self.dy-1) or
			map_kill(right,self.y+self.dy-1)
		then
			self:kill()
		end
	
		-- going up
		if solid(left,self.y+self.dy-1) or
			solid(right,self.y+self.dy-1)
		then
			-- hit ceiling
			self.dy=0
			
			-- search contact point
			while not solid(left,self.y-1)
				and not solid(right,self.y-1)
			do
				self.y-=0.01
			end
		else
			self.y+=self.dy
		end
	else
		-- going down
	
		if map_kill(left,self.y+self.dy) or
			map_kill(right,self.y+self.dy)
		then
			self:kill()
		end
		
		local is_solid=solid
		if not self:getf(af.platdrop)
		then
			is_solid=platform_solid
		end
	
		if is_solid(left,self.y+self.dy)
			or is_solid(right,self.y+self.dy)
		then
			-- bounce
			if self.k_bounce_floor>0 and
				self.dy>0.2
			then
				self.dy*=-self.k_bounce_floor
			else
				self:setf(af.grounded,true)
				self.dy=0
			end
			
			-- snap down
			while not is_solid(left,self.y)
				and not is_solid(right,self.y)
			do
				self.y+=0.05
			end

			-- pop up
			local count=5
			while 
				(is_solid(left,self.y-0.1)
					or is_solid(right,self.y-0.1))
				and not is_solid(left,self.y-1)
				and not is_solid(right,self.y-1)
			do
				self.y-=0.05
				count+=1
			end
--[[			while solidfn(right,self.y-0.1)
			do
				self.y-=0.05
			end]]
		else
			self.y+=self.dy
		end
	end
	
	if self:getf(af.grounded) then
		self.t_air=0
	else
		self.t_air+=dt
	end
end

function actor:new(p)
	self.__index=self
	p=p or {}
	p.inp=p.inp or {x=0,y=0,btns=0}
	return setmetatable(p,self)
end

function actor:setf(f,v)
	if v then
		self.flags=bor(self.flags,f)
	else
		self.flags=band(self.flags,
			bnot(f))
	end
	return self.flags
end

function actor:getf(f)
	return band(self.flags,f)~=0
end

function actor:left() return self.x-self.w end
function actor:right() return self.x+self.w end
function actor:top() return self.y-self.h end
function actor:bottom() return self.y end

function actor:overlap(other)
	return self:left()<=other:right()
		and self:right()>=other:left()
		and self:top()<=other:bottom()
		and self:bottom()>=other:top()
end
-->8
-- utils

_sgn=sgn
function sgn(v)
	if (v==0) return 0
	return _sgn(v)
end

function moveto(a,b,d)
	if abs(b-a)<=d then
		return b
	else
		return a+sgn(b-a)*d
	end
end

_watches={}

function watch(msg,col)
	add(_watches,{msg=tostr(msg),
		col=col or 12})
end

function draw_watch(col)
	col=col or 12
	local n=#_watches
	for i=0,n-1 do
		local w=_watches[i+1]
		print(w.msg,0,i*6,w.col)
	end
end

_logs={}

function log(msg,col)
	add(_logs,{msg=tostr(msg),col=col or 6})
	local n=#_logs
	if n>20 then
		for i=2,n do
			_logs[i-1]=_logs[i]
		end
		_logs[n]=nil
	end
end

function draw_log()
	local n=#_logs
	for i=1,n do
		local l=_logs[i]
		print(l.msg,127-#l.msg*4,(i-1)*6,l.col)
	end
end

_jk_btns={}
for i=0,5 do
	_jk_btns[i]={
		last={},
		curr={},
	}
end

function jk_update()
	_watches={}

	for p=0,5 do
		local pl=_jk_btns[p]
		for b=0,5 do
			pl.last[b]=pl.curr[b] or false
			pl.curr[b]=btn(b,p)
		end
	end
end

_btnp=btnp
function btnp(b,p)
	p=p or 0
	local pl=_jk_btns[p]
	return pl.curr[b] and not pl.last[b]
end

function btnr(b,p)
	p=p or 0
	local pl=_jk_btns[p]
	return not pl.curr[b] and pl.last[b]
end

function clone(o,m)
	local ret={}
	for k,v in pairs(o) do
		ret[k]=v
	end
	m=m or {}
	for k,v in pairs(m) do
		ret[k]=v
	end
	return ret
end
-->8
-- physics

function w2s(wx,wy)
	-- todo: camera
	return wx*8,wy*8
end

function solid(wx,wy)
	-- todo: other things
	return map_solid(wx,wy)
end

-- is world coord: wx,wy solid
-- 1 world unit == 8 pixels
function map_solid(wx,wy)
	--return fget(mget(wx,wy),0)
	local val=mget(wx,wy)
	if fget(val,0) then
		if fget(val,4) then
			-- slope
			local l,r=flr(wx),ceil(wx)
			local t,b=flr(wy),ceil(wy)
			local nx,ny=wx-l,wy-t
			local flipx=fget(val,5)
			local flipy=fget(val,6)
			if not flipx then	
				return nx>(1-ny)
			else
				return nx<=ny
			end
			return false
		elseif fget(val,2) then
			
		else
			return true
		end
	end
	return false
end

function platform_solid(wx,wy)
	local ret=solid(wx,wy)
	local val=mget(wx,wy)
	if fget(val,2) then
		return wy-flr(wy)<0.5
	end
	return ret
end

function map_kill(wx,wy)
	return fget(mget(wx,wy),1)
end
-->8
-- entity

entity={
	x=0,y=0,val=0,
	start=function(self)
	end,
	tick=function(self,dt)
	end
}

function entity:new(p)
	self.__index=self
	return setmetatable(p or {},self)
end

switch_block=entity:new({
	start=function(self)
		self.ivl=self.ivl or 1
		self.t0=self.ivl
		self.frame=0
		self.base=self.val
		if not fget(mget(self.x,self.y),0) then
			self.frame=1
			self.base-=1
		end
	end,
	tick=function(self,dt)
		self.t0-=dt
		if self.t0<=0 then
			self.t0+=self.ivl
			self.frame=(self.frame+1)%2
			mset(self.x,self.y,self.base+self.frame)
		end
	end
})

_entity_map={}
_entity_map[7]=switch_block
_entity_map[8]=switch_block

function init_entities(x,y,w,h)
	entities={}
	for xx=x,x+w-1 do
		for yy=y,y+h-1 do
			local val=mget(xx,yy)
			local entdef=_entity_map[val]
			if entdef then
				local def=clone(entdef)
				def.x=xx
				def.y=yy
				def.val=val
				local ent=add(entities,def)
				ent:start()
			end
		end
	end
end

function tick_entities(dt)
	for e in all(entities) do
		e:tick(dt)
	end
end
__gfx__
00000000033333309999999900000009900000009999999999999999999999994444444499999999808080800088008800000000000000000000000000000000
0000000003bbbbb09999999900000099990000000999999999999990999999994444444499999999088888880088008800000000000000000000000000000000
0070070003b99990999999990000099999900000009999999999990099999999444444440000000088eeee808800880000000000000000000000000000000000
0007700003bb9990999999990000999999990000000999999999900099999999444444440000000008eeee888800880000000000000000000000000000000000
0007700033bbbbb3999999990009999999999000000099999999000099999999444444440000000088eeee800088008800000000000000000000000000000000
0070070033bbbbb3999999990099999999999900000009999990000099999999444444440000000008eeee880088008800000000000000000000000000000000
0000000033bbbbb39999999909999999999999900000009999000000999999994444444400000000888888808800880000000000000000000000000000000000
00000000033333309999999999999999999999990000000990000000999999994444444400000000080808088800880000000000000000000000000000000000
00000000000055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc0569466650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cddddd0564966650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccddedec564466550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccdddddc564665650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccdddddc556655550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc0555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055500033333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0005550003bbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0562665003b999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0566665003bb99900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0562665033bbbbb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0566665033bbbbb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0566665033bbbbb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05555550033333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bb999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bbb99900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbb3bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000b33333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bb33b5530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bb3bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000011131517109080503820000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000909090200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000080200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020000000000000a0a0000000000070200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020909090202020202020902020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000700000000000b00000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202000000000a00000b00030204000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202000008000000000003020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000030202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020a020202020202020202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
