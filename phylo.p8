pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
function _init()
	world={}
	world.grav=0.4
	
	plr=new_entity(64,64,6,5)
end

function _update()
	inp={
		dx=0,dy=0,
		jump=false,
	}
	
	if (btn(0)) inp.dx-=1
	if (btn(1)) inp.dx+=1
	if (btn(2)) inp.dy-=1
	if (btn(3)) inp.dy+=1
	if (btnp(4)) inp.jump=true

	entity_move(plr,inp)
	
	btnpoll()
end

function _draw()
	cls()
	print("ì›ƒ",plr.x-plr.hw,plr.y-plr.hh,7)
	pset(plr.x,plr.y,8)
	map(0,0,0,0,16,16)
end

function new_entity(x,y,w,h,prop)
	local self={}
	prop=prop or {}
	self.x=x or 0
	self.y=y or 0
	self.w=w or 1
	self.h=h or 1
	self.hw=flr(self.w/2)
	self.hh=flr(self.h/2)
	self.dx=0
	self.dy=0
	self.ground=false
	self.k_grndacl=0.3
	self.k_airacl=0.05
	self.k_grndfric=0.15
	self.k_airfric=0.01
	self.k_fallmx=4
	self.k_jmpforce=6
	return self
end

function entity_move(self,inp)
	inp=inp or {}
	local mx,my=inp.dx or 0,
		inp.dy or 0

	self.dy+=world.grav
	
	if self.dy>self.k_fallmx then
		self.dy=self.k_fallmx
	end
	
	local hit,d=cast_down(
		self.x,self.y+self.hh+1,
		self.dy)

	if hit then
		self.dy=d
		self.ground=true
	else
		self.ground=false
	end
	
	if self.ground and inp.jump
	then
		self.dy=-self.k_jmpforce
	end
 
 if self.dy<0 then
 	local hit,d=cast_up(
 		self.x,self.y-self.hh,
 		-self.dy)
 		
 	if (hit) self.dy=-d
 end
	
	local acl=self.k_grndacl
	if not self.ground then
		acl=self.k_airacl
	end
	acl*=mx
	self.dx+=acl
	
	local fric=self.k_grndfric
	if not self.ground then
		fric=self.k_airfric
	end
	self.dx=moveto(self.dx,0,fric)
	
	if self.dx<0 then
 	local left,ld=cast_left(
 		self.x-self.hw,self.y,
 		-self.dx)
 		
 	if (left) self.dx=-ld
 elseif self.dx>0 then
 	local right,rd=cast_right(
 		self.x+self.hw,self.y,
 		self.dx)

		if (right) self.dx=rd 	
 end
	
	self.x+=self.dx
	self.y+=self.dy
end

function cast_right(ox,oy,d,s)
	s=s or 1
	for x=ox,ox+d,s do
		if point_solid(x,oy) then
			return true,x-ox
		end
	end
	return false
end

function cast_left(ox,oy,d,s)
	s=s or 1
	for x=ox,ox-d,-s do
		if point_solid(x,oy) then
			return true,ox-x
		end
	end
	return false
end

function cast_down(ox,oy,d,s)
	s=s or 1
	for y=oy,oy+d,s do
		if point_solid(ox,y) then
			return true,y-oy
		end
	end
	return false
end

function cast_up(ox,oy,d,s)
	s=s or 1
	for y=oy,oy-d,-s do
		if point_solid(ox,y) then
			return true,oy-y
		end
	end
	return false
end

function cell_solid(cx,cy)
	return fget(mget(cx,cy),0)
end

function point_solid(x,y)
	return cell_solid(flr(x/8),
		flr(y/8))
end

function moveto(i,f,r)
	if i>f then
		return max(i-r,f)
	elseif i<f then
		return min(i+r,f)
	else
		return f
	end
end

btnpd=btnp

_btns={}
function btnpoll()
	for i=0,5 do
		_btns[i]=btn(i)
	end
end

function btnp(b)
	return btn(b) and not _btns[b]
end

function btnr(b)
	return not btn(b) and _btns[b]
end
__gfx__
00000000565555650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000665555660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000665555660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000565555650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
