pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
function _init()
	poke(0x5f2d,1)

	units={}
	selection={}
	
	for i=1,8 do
		add_unit(1,
			4+flr(rnd(8)),
			4+flr(rnd(8)))
	end
--	add_unit(1,0,0)
	
	mou_x,mou_y,mou_b,
	mou_px,mou_py,mou_pb=
		0,0,0,0,0,0

	sel_box_x1,sel_box_y1,
	sel_box_x2,sel_box_y2=-1,-1,-1,-1
	
	mcel_x,mcel_y=-1,-1
	worl_x,worl_y=-1,-1
	
	coroutines={}
end

function _update()
	mou_px,mou_py,mou_pb=mou_x,mou_py,mou_b
	mou_x=stat(32)
	mou_y=stat(33)
	mou_b=stat(34)
	
	local dx,dy=
		mou_x-mou_px,
		mou_y-mou_py
	
	for i=1,5 do
		local b=band(mou_b,shl(1,i-1))~=0
		local pb=band(mou_pb,shl(1,i-1))~=0
		if b and not pb then
			mou_down(i)
		elseif not b and pb then
			mou_up(i)
		elseif b and pb and 
			(dx~=0 or dy~=0)
		then
			mou_drag(i,dx,dy)
		end
	end
	
	for cr in all(coroutines) do
		if cr and costatus(cr)~="dead" then
			assert(coresume(cr))
		else
			del(coroutines,cr)
		end
	end
	
	foreach(units,function(unit)
		local move_x,move_y=0,0
	
		if unit.path and #unit.path>0 then
			if not unit.next then
				unit.next=unit.path[1]
				
			end
			
			local dx,dy=unit.next.x-unit.x,
					unit.next.y-unit.y
			
			if abs(dx)<0.25 and
				abs(dy)<0.25
			then
				del(unit.path,unit.next)
				unit.next=nil
			else
				local ms=0.125
				move_x=mid(dx,-ms,ms)
				move_y=mid(dy,-ms,ms)
			end
		end

		if move_x~=0 or move_y~=0 then
			unit.t0+=0.5
		end
		
		local mx,my=move_x+unit.nudge_x,
			move_y+unit.nudge_y
			
		if move_x~=0 or move_y~=0 then
			if abs(mx)>=abs(my) then
				unit.sp=16
				if mx<0 then
					unit.spfx=true
				else
					unit.spfx=false
				end
			else
				if my<0 then
					unit.sp=20
				else
					unit.sp=18
				end
			end
		end
			
		unit.nudge_x=0
		unit.nudge_y=0
			
		local t=1
		while solid(unit.x+unit.w+mx*t,unit.y+unit.h+my*t) and t>0 do
			t-=0.1
		end
		unit.x+=mx*t
		unit.y+=my*t
	end)
	
	local n=#units
	for i=1,n-1 do
		for j=i+1,n do
			local a,b=units[i],units[j]
			local hit,nx,ny=unit_coll(a,b)
			if hit then
				if nx==0 and ny==0 then
					nx=1
				end
				local mx,my=nx/8,ny/8
				a.nudge_x+=mx
				a.nudge_y+=my
				b.nudge_x-=mx
				b.nudge_y-=my
			end
		end
	end
end

function norm(x,y)
	local l=sqrt(x*x+y*y)
	if (l==0) return 0,0
	return x/l,y/l
end

function unit_coll(a,b)
	local ax1,ay1,ax2,ay2=extents(a)
	local bx1,by1,bx2,by2=extents(b)
	
	if ax1<=bx2 and
		ax2>=bx1 and
		ay1<=by2 and
		ay1>=by1
	then
		local dx,dy=a.x-b.x,a.y-b.y
		local nx,ny=norm(dx,dy)
		return true,nx,ny
	end
	return false,0,0
end


function mou_down(b)
	if b==1 then
		sel_box_x1,sel_box_y1,
		sel_box_x2,sel_box_y2=
			mou_x,mou_y,mou_x,mou_y
	elseif b==2 then
		worl_x,worl_y=flr(mou_x/8),flr(mou_y/8)
	elseif b==3 then
		mcel_x=flr(mou_x/8)
		mcel_y=flr(mou_y/8)
	end
end

function mou_up(b)
	if b==1 then
		select(sel_box_x1,sel_box_y1,
			sel_box_x2,sel_box_y2)
	
		sel_box_x1,sel_box_y1,
		sel_box_x2,sel_box_y2=-1,-1,-1,-1
	elseif b==2 then
		if flr(mou_x/8)==worl_x and
			flr(mou_y/8)==worl_y
		then
			-- do action
			direct(mou_x,mou_y)
		end
	elseif b==3 then
		if flr(mou_x/8)==mcel_x and
			flr(mou_y/8)==mcel_y
		then
			local m=mget(mcel_x,mcel_y)
			local n=32
			if (m==32) n=48
			mset(mcel_x,mcel_y,n)
		end
	end
end

function mou_drag(b,dx,dy)
	sel_box_x2,sel_box_y2=
		mou_x,mou_y
end

function select(x1,y1,x2,y2)
	if (x2<x1) x1,x2=x2,x1
	if (y2<y1) y1,y2=y2,y1

	selection={}

	for unit in all(units) do
		local ux1,uy1,ux2,uy2=
			extents(unit)
		
		if intersect(x1,y1,x2,y2,
			ux1,uy1,ux2,uy2)
		then
			add(selection,unit)
		end
	end
end

function direct(px,py)
	local wx,wy=flr(px/8),flr(py/8)
	for unit in all(selection) do
		unit.tx=wx+0.5
		unit.ty=wy+0.5

		local f=function()
			unit.path=get_path(unit.x+unit.w,unit.y+unit.h,unit.tx,unit.ty)
		end
		unit.path=nil
		add(coroutines,cocreate(f))
	end
end

function intersect(ax1,ay1,ax2,ay2,bx1,by1,bx2,by2)
	return ax1<=bx2 and
		ax2>=bx1 and
		ay1<=by2 and
		ay2>=by1
end

function extents(r)
	return r.x*8,r.y*8,
		(r.x+r.w*2)*8-1,
		(r.y+r.h*2)*8-1
end

function _draw()
	cls()

	-- game camera
	
	map(0,0,0,0,16,16)
	
	foreach(units,function(self)
		spr(self.sp+(self.t0%2),
			self.x*8,
			self.y*8,
			self.sw,self.sh,
			self.spfx,self.spfy)
			
		if self.path then
			local n=#self.path
			for i=1,n-1 do
				local a=self.path[i]
				local b=self.path[i+1]
				line(a.x*8+4,a.y*8+4,b.x*8+4,b.y*8+4,12)
			end
		end
	end)
	
	foreach(selection,function(self)
		local x1,y1,x2,y2=extents(self)
		rect(x1-1,y1-1,x2+1,y2+1,10)
	end)
	
	-- ui camera
		
	pset(stat(32),stat(33),11)
	if sel_box_x1>=0 and
		sel_box_y1>=0
	then
		rect(sel_box_x1,sel_box_y1,
			sel_box_x2,sel_box_y2,
			11)
	end
end

function add_unit(utype,x,y)
	local sp=0
	if utype==1 then
		sp=16
	end

	return add(units,{
		utype=utype or 0,
		x=x or 0,
		y=y or 0,
		w=0.5,h=0.5,
		tx=x or 0,ty=y or 0,
		path={},
		sp=sp,sw=1,sh=1,
		nudge_x=0,nudge_y=0,
		t0=0,
	})
end
-->8
function get_path(x1,y1,x2,y2)
	x1=flr(x1)
	y1=flr(y1)
	x2=flr(x2)
	y2=flr(y2)

	local dist=function(x1,y1,x2,y2)
		return abs(x1-x2)+abs(y1-y2)
	end
	
	
	local hash=function(x,y)
		return y*64+x+10000
	end
	
	local unhash=function(h)
		local i=h-10000
		return i%128,flr(i/128)
	end
	
	local open,closed={},{}
	
	local make_node=function(x,y,p,g,h)
		g=g or 0
		h=h or 0
		return {
			x=x,y=y,p=p,
			g=g,h=h,f=g+h
		}
	end
		
	local add_open=function(n)
		local h=hash(n.x,n.y)
		if not open[h] and not closed[h] then
			open[h]=true
			return add(open,n)
		end
	end
	
	local add_closed=function(n)
		local h=hash(n.x,n.y)
		if not closed[h] then
			open[h]=nil
			del(open,n)

			closed[h]=true
			add(closed,n)
		end
	end
		
	local process=function(node,ctx)
		if ctx.d%10==0 and ctx.ld<ctx.d then
			ctx.ld=ctx.d
			yield()
		end

		if solid(node.x,node.y) then
			return nil
		end
		
		if node.x==ctx.x2 and
			node.y==ctx.y2
		then
			return node
		end
	
		add_closed(node)
		
		local valid=function(x,y)
			return x>=0 and x<=15 and
				y>=0 and y<=15
		end
			
		local diag_open=function(x1,y1,x2,y2)
			local dx,dy=abs(x1-x2),abs(y1-y2)
			return dx~=1 or dy~=1 or
				not (solid(x2,y1) or solid(x1,y2))
		end
		
		for xx=node.x-1,node.x+1 do
			for yy=node.y-1,node.y+1 do
				if valid(xx,yy) and not solid(xx,yy) and
					diag_open(node.x,node.y,xx,yy)
				then
					-- todo: diagnol blockers
					local g=14
					if xx==node.x or
					 yy==node.y
					then
						g=10
					end
					g+=node.g
					local h=dist(xx,yy,
						ctx.x2,ctx.y2)
					add_open(
						make_node(xx,yy,node,g,h))
				end
			end
		end
		
		local adj={}
		for o in all(open) do
			if abs(node.x-o.x)==1 and
				abs(node.y-o.y)==1
			then
				if o.g<node.g then
					o.parent=node
					o.g=node.g+10
					o.f=o.g+o.h
				end
			end
		end
		
		if #open==0 then
			return nil
		end
		
		local minf=32767
		local low=nil
		for o in all(open) do
			if o.f<minf then	
				minf=o.f
				low=o
			end
		end
--		
--		cls()
--		print(#open,0,0)
--		print(low.x..","..low.y,0,6)
--		flip()

		ctx.d+=1
		return ctx.process(low,ctx)
	end

	local node=add_open(make_node(x1,y1))
	local final=process(node,{x1=x1,y1=y1,x2=x2,y2=y2,process=process,d=0,ld=0})
	
	local ret={}
	if final then
		local slide=final
		add(ret,slide)
		while slide.p do
			slide=slide.p
			add(ret,slide)
		end
	end
	
	-- todo: reverse
	local h,t=1,#ret
	while t>h do
		ret[h],ret[t]=ret[t],ret[h]
		h+=1
		t-=1
	end
	return ret
end

function solid(x,y)
	return fget(mget(x,y),0)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999900009999007949949009499497099999977999999000000000000000000000000000000000000000000000000000000000000000000000000000000000
04449490044494907074470770744707004994077049940000000000000000000000000000000000000000000000000000000000000000000000000000000000
44499749444997494999999449999994794444999944449700000000000000000000000000000000000000000000000000000000000000000000000000000000
79949999799499999449944994499449994444499444449900000000000000000000000000000000000000000000000000000000000000000000000000000000
49944940494449409494494994944949944444477444444900000000000000000000000000000000000000000000000000000000000000000000000000000000
97997767799777777444449999444447744774400447744700000000000000000000000000000000000000000000000000000000000000000000000000000000
04994440099444400994449779444990744449900994444700000000000000000000000000000000000000000000000000000000000000000000000000000000
09970997000997007997000770007997000099999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
65555556000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3020303030303030302030303020203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3020303020303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030302000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030302030303030302000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303020203030302030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030203030203030302030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030302030302030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030203030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030302030302030302030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030202030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030302020303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
