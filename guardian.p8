pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
#include util.p8

function _init()
	world={
		h=1,b=0,bh=nil,
		nob=0,
		page=0,
		w=48
	}
	
	cam={x=0,y=0,fx=0}
	
	_face_t={-1,1}
	gen_world(0,world.w-1)

	p={
		x=64,y=64,dx=0,dy=0,
		ddx=0,ddy=0,
		face=1,
		face_r=0.33,
		turn_sgn=0,
		thrust=0,
		accel=0.24,
		decay=0.12,
		max_x=1.7,
		max_y=1.2,
		t0=0,
		t_bubble=1,
		sp=32,
		draw=draw_player,
	}
	
	chain={
		points={},
		links={}
	}
	
	local n=6
	for i=1,n do
		local mass=(i==n) and 10 or 1
		add(chain.points,
			vertlet:new({
				x=p.x,y=p.y+(i-1)*6,
				mass=mass
			}))
	end
	
	for i=1,n-1 do
		add(chain.links,
			link:new({
				a=chain.points[i],
				b=chain.points[i+1],
				rest=6,
				stiff=0.3
			}))
	end
	
	actors={}
	kill_q={}
	add(actors,p)
	enemies={}
	
	for i=1,10 do
		local a={
			id=i,
			x=flr(rnd(128))-64,y=flr(rnd(48)),
			dx=0,dy=0,
			ddx=0,ddy=0,
			t0=flr(rnd(8))+8,
			sp=4,
			draw=draw_enemy,
		}
		add(actors,a)
		add(enemies,a)
	end	
end

function s2w(sx,sy)
	return flr(sx/8-world.page*16),
		flr(sy/8)
end

function _update()
	local ix,iy=0,0
	local pid=0
	
	if (btn(0,pid)) ix-=1
	if (btn(1,pid)) ix+=1
	if (btn(2,pid)) iy-=1
	if (btn(3,pid)) iy+=1
	
	if p.turn_sgn==0 then
		if (ix~=0) p.turn_sgn=sgn(ix)
	else
		p.face+=p.turn_sgn*p.face_r
		if p.face<-1 then
			p.face=-1
			p.turn_sgn=0
		elseif p.face>1 then
			p.face=1
			p.turn_sgn=0
		end
	end
	
	if ix~=0 then
		p.thrust=moveto(p.thrust,abs(ix),0.2)
	else
		p.thrust=moveto(p.thrust,0,0.05)
	end
	
//	ix,iy=norm(ix,iy)
	
	local accel=p.accel
	
	if ix~=0 then
		p.dx+=ix*accel*abs(p.face)
	else
		p.dx=moveto(p.dx,0,p.decay)
	end
	
	if iy~=0 then
		p.dy+=iy*accel
	else
		p.dy=moveto(p.dy,0,p.decay*4)
	end
			
	p.dx=mid(p.dx,-p.max_x,p.max_x)
	p.dy=mid(p.dy,-p.max_y,p.max_y)
	
	if p.dx~=0 then
		p.t0+=p.thrust*0.5
	end
	
	local norm_dx=p.dx/p.max_x
	local bubble=abs(norm_dx)*0.25
	
	p.t_bubble-=bubble
	if p.t_bubble<=0 then
		p.t_bubble+=1
		add(actors,{
			x=p.x,y=p.y,
			dx=rnd()-0.5,dy=0,
			ddx=0,ddy=-0.1,
			t_life=60,
			layer=-1,
			draw=function(self,x)
				pset(x or self.x,self.y,12)
			end
		})
	end
	
	for pt in all(chain.points) do
		pt:force(0,1)
	end
	
	chain.points[1].pin_x=p.x
	chain.points[1].pin_y=p.y
	
	integrate(chain.points,chain.links,fps30_dt)
	
	--[[
	if btnp(1) then
		p.dx=8
	else
		p.dx=0
	end]]
	foreach(enemies,function(self)
		self.face=self.face or 1
		self.t=self.t or self.t0
		self.dx+=0.05*self.face
		if self.dx>1 then
			self.dx=1
			self.t-=1
		end
		if self.dx<-1 then
			self.dx=-1
			self.t-=1
		end
		if self.t<=0 then
			self.face*=-1
			self.t=nil
		end
	end)
	
	-- update actors
	foreach(actors,function(a)
		move_actor(a)
		wrap_actor(a)
		if a.t_life~=nil and a.t_life>0
		then
			a.t_life-=1
			if a.t_life<=0 then
				kill_actor(a)
			end
		end
	end)
	
	local n=#kill_q
	for i=1,n do
		del(actors,kill_q[i])
		kill_q[i]=nil
	end
		
	-- sort actors by x coordinate
	-- ascending
	-- makes wrapped drawing
	-- significantly cheaper
	local n=#actors
	for i=1,3 do
		for x=1,n-1 do
			for y=x+1,n do
				if actors[x].x>actors[y].x then
					actors[x],actors[y]=actors[y],actors[x]
				end
			end
		end
	end
	
	local wx,wy=s2w(p.x,p.y)

	if fget(mget(wx,wy),0) then

	end
	
	watch("pos:"..p.x..","..p.y)
end


function _draw()
	cls(1)
	
	cam.fx=lerp(cam.fx,p.face*16,0.21)
	cam.x=p.x-64+cam.fx
	camera(cam.x,cam.y)
	
	for link in all(chain.links) do
		line(link.a.x,link.a.y,
			link.b.x,link.b.y,4)
	end
	
	-- draw actors
	local l,r=cam.x,
		cam.x+127
	local wl,wr=wrap_x(l)-8,
		wrap_x(r)+8
	
	local ww=world.w*8

	local in_layer=function(a,layer)
		return a.layer==layer
			or a.layer==nil and layer==0
	end
	
	local should_draw=function(a,layer)
		return a.draw
			and in_layer(a,layer)
	end

	for layer=-2,2 do
		local n=#actors
		for i=1,n do
			local a=actors[i]
			if should_draw(a,layer) then
				a:draw()
			end
		end
		
		-- draw wrapped actors
			
		if l<0 then
			local n=#actors
			for i=n,1,-1 do
				local a=actors[i]
				if (a.x<wl) break
				if should_draw(a,layer) then
					a:draw(a.x-ww)
				end
			end
		elseif r>ww then
			local n=#actors
			for i=1,n do
				local a=actors[i]
				if (a.x>wr) break
				if should_draw(a,layer) then
					a:draw(a.x+ww)
				end
			end
		end
	end

	-- draw world
	//map(0,0,-p.x+64+world.page*128,0,32,16)
	map(0,0,
					0,0,
					world.w,16)
					
	local buff=20

	map(world.w-buff,0,
					-buff*8,0,
					buff,16)
									
	map(0,0,
					world.w*8,0,
					buff,16)
					
	line(0,0,0,127,12)
	line(world.w*8,0,world.w*8,127,12)
		
	camera()
	
	-- minimap
--	map_mode="paged"
	map_mode="dynamic"
	if map_mode=="paged" then
		local wx,wy=s2w(p.x,p.y)
		local mpx,mpy=1,111
		rectfill(mpx,mpy,mpx+31,mpy+15,0)
		line(mpx+wx-9,mpy,mpx+wx-9,mpy+15,2)
		line(mpx+wx+8,mpy,mpx+wx+8,mpy+15,2)
		rectfill(mpx+wx-8,mpy,mpx+wx+7,mpy+15,1)
		rect(mpx-1,mpy-1,mpx+32,mpy+16,12)
		for x=0,31 do
			for y=0,15 do
				if fget(mget(x,y),0) then
					pset(mpx+x,mpy+y,5)
				end
			end
		end
		if wy>=0 and wy<16 then
			pset(mpx+wx,mpy+wy,7)
		end
	elseif map_mode=="dynamic" then
		local wx,wy=s2w(p.x,p.y)
		local c=16
		local view=c+round(cam.fx/8+0.5)
		local mpx,mpy=1,111		
		rectfill(mpx,mpy,mpx+31,mpy+15,0)
		line(mpx+view-9,mpy,mpx+view-9,mpy+15,2)
		line(mpx+view+8,mpy,mpx+view+8,mpy+15,2)
		rectfill(mpx+view-8,mpy,mpx+view+7,mpy+15,1)
		rect(mpx-1,mpy-1,mpx+32,mpy+16,12)
		for x=0,31 do
			for y=0,15 do
				if fget(mget((x+wx-16)%world.w,y),0) then
					pset(mpx+x,mpy+y,5)
				end
			end
		end
		if wy>=0 and wy<16 then
			pset(mpx+c,mpy+wy,7)
		end
	end
	
	draw_watches()
	draw_log()
end

function gz(n)
	return n>0 and 1 or 0
end

function lz(n)
	return n<0 and 1 or 0
end


function draw_player(self)
	local px=self.x
	local sp=self.sp+self.face+1.5
	pset(px-4*sgn(self.face)+lz(self.face),self.y+flr(self.t0)%2,7)

	spr(sp,px-3,p.y-3)
end

function draw_enemy(self,x,y)
	x=x or self.x
	y=y or self.y
	local face=(mid(self.dx,-1,0x0.ffff)+1)/2
	local sp=self.sp+face*4
	spr(sp,x-3,y-3)
end

-->8
-- world

function gen_world(x0,x1,flat)
	for x=x0,x1 do
		for y=0,15 do mset(x,y,0) end
	
		local rough=0.3
		if (flat) rough=0
		if rnd()<rough then
			local d=_face_t[flr(rnd(2))+1]
			world.h=mid(world.h+d,0,3)
		end
		
		if world.b>0 then
			world.b-=1
			if (world.b<=0) world.bh=nil
		end
		
		local bperc=0.25
		if (flat) bperc=0
		if (world.nob>0) world.nob-=1
		if world.b==0 and rnd()<bperc and world.nob<=0 then
			world.b=flr(rnd(2))+2
			_bh={5,5,5,
				6,6,6,6,7,7,7,7,8,8,9}
			local bhi=flr(rnd(#_bh))+1
			world.bh=_bh[bhi]
			world.nob=8+flr(rnd(8))
		end
		
		local top=15-(world.bh or world.h)
		for y=15,top,-1 do
			local s=24
			if (y==top) s=8
			mset(x,y,s)
		end
	end
end

function move_world(dstx,srcx,w)
	for x=0,w-1 do
		for y=0,15 do
			mset(dstx+x,y,mget(srcx+x,y))
		end
	end
end


-->8
-- actors

function move_actor(self)
	self.dx+=self.ddx
	self.dy+=self.ddy
	self.x+=self.dx
	self.y+=self.dy
	
	self.wx=flr(self.x/8-world.page*16)
	self.wy=flr(self.y/8)
end

function kill_actor(a)
	a.dead=true
	add(kill_q,a)
end

function wrap_x(x)
	local pw=world.w*8
	while x<0 do x+=pw end
	while x>=pw do x-=pw end
	return x
end

function wrap_actor(a)
	a.x=wrap_x(a.x)
end

-->8
-- vertlets

vertlet={
	x=0,y=0,		-- pos
	lx=0,ly=0,-- last pos
	dx=0,dy=0,		-- velocity
	ddx=0,ddy=0,-- accel
	pin_x=nil,pin_y=nil, -- pin
	mass=10,
}

function vertlet:new(p)
	self.__index=self
	p=p or {}
	p.lx=p.x
	p.ly=p.y
	return setmetatable(p,self)
end

function vertlet:force(fx,fy)
	self.ddx+=fx/self.mass
	self.ddy+=fy/self.mass
end

link={
	a=nil,b=nil,
	rest=1,
	tear=0x7fff,
	stiff=0.4,
}

function link:new(p)
	self.__index=self
	return setmetatable(p or {},self)
end

function integrate(points,links,dt)
	for i=1,4 do
		for link in all(links) do
			local p1,p2=link.a,link.b
			
			local dx,dy=p1.x-p2.x,
				p1.y-p2.y
				
			local d=sqrt(dx*dx+dy*dy)

			if (d>=link.tear) then
				del(links,link)
			end
			
			local diff=(link.rest-d)/d
							
			local tx=dx*link.stiff*diff
			local ty=dy*link.stiff*diff
			p1.x+=tx
			p1.y+=ty
	
			p2.x-=tx
			p2.y-=ty
		end
	end
	
	for pt in all(points) do
		pt.dx*=0.99
		pt.dy*=0.99
	
		pt.dx=pt.x-pt.lx
		pt.dy=pt.y-pt.ly

		pt.lx=pt.x
		pt.ly=pt.y

		pt.x=pt.x+pt.dx+pt.ddy*dt
		pt.y=pt.y+pt.dy+pt.ddy*dt

		if (pt.pin_x) pt.x=pt.pin_x
		if (pt.pin_y) pt.y=pt.pin_y
		
		pt.ddx,pt.ddy=0,0
	end
end
__gfx__
0000000000000000000000000000000000000000008008000080080000000000bbbbbbbb00000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000880880008888000088880008808800bbbbbbbb00000000000000000000000000000000000000000000000000000000
007007000000000000000000000000000888880008eeee8008eeee8000888880bbbbbbbb00000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000eeeee88808eeee8008eeee80888eeeee44bb44b400000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000e8e8ee800e8e8e8088e8e8e008ee8e8e4bb44b4400000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000eeeeee800eeeee8008eeeee008eeeeeeb44b444400000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000088888880888888008888880888888804444444400000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000888000008808888088000008880004444444400000000000000000000000000000000000000000000000000000000
00666000000660000006660000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
06666c000066660000c6666000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
0cccccddddc66cddddccccc000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
00cc99ddd4cccc4ddd99cc0000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
999999dd99cccc99dd99999900000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
49cccc0d99cccc99d0cccc9400000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
0ddcdd000ddccdd000ddcdd000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
0dd0dd000dd00dd000dd0dd000000000000000000000000000000000000000004444444400000000000000000000000000000000000000000000000000000000
00666600000660000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
066666dd00666600dd66666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
066dddaa9a6666a9aaddd66000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ddddaa9a99d66d99a9aadddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaa99aaaddddaaa99aaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9adddddaaaaddaaaaddddda900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
066666dd066aa660dd66666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0808080808080808080808080808080818181818181818181818181818181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0808080808080808080808080808080818181818181818181818181818181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0808080808080808080808080808080818181818181818181818181818181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
