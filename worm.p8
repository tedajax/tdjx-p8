pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
function _init()
	combo_levels={
		{
			needed=0,
			mult=1
		},
		{
			needed=16,
			mult=2,
		},
		{
			needed=32,
			mult=4,
		},
		{
			needed=64,
			mult=8,
		},
		{
			needed=128,
			mult=16,
		},
	}

	gm={
		score=0,
		combo_xp=0,
		combo_level=1,
		apple_score=5,
		combo_drain=12,
	}

	snek={
		x=63,y=63,
		r=0,
		speed=36,
		turn=1.2,
		rad=1,
		invul_f=10,
		last_x=63,
		last_y=63,
		col_idx=9,
		tail={}
	}
	
	snek_add_chunk(snek,6)
	
	apples={}
	apple_ct=5
	for i=1,apple_ct do
		add_apple()
	end
end

function rnd_apple_pos()
	local valid=function(x,y)
		return not fget(mget(x,y),0)
	end
	
	local tx,ty=0,0
	repeat
		tx,ty=flr(rnd(16)),flr(rnd(16))
	until valid(tx,ty)

	return tx*8+4,ty*8+4
end

function add_apple()
	local x,y=rnd_apple_pos()
	add(apples,{id=#apples,x=x,y=y,rad=2})
end

function snek_add_chunk(s,ct)
	local n=#s.tail
	local t=s.tail[n]
	
	local tx,ty=s.x,s.y
	if t then
		tx,ty=t.x,t.y
	end
	
	ct=ct or 1
	
	for i=1,ct do
		add(s.tail,{x=tx,y=ty,rad=1})
	end
end

function _update()
	dt=1/30
	
	if (snek.invul_f>0) snek.invul_f-=1
	
	if dist(snek.x,snek.y,snek.last_x,snek.last_y)>=3 then
		snek.last_x=snek.x
		snek.last_y=snek.y
 	local n=#snek.tail
 	if n>0 then
  	for i=n,2,-1 do
  		snek.tail[i].x=
  			snek.tail[i-1].x
  		snek.tail[i].y=
  			snek.tail[i-1].y
  	end
  	snek.tail[1].x=snek.x
  	snek.tail[1].y=snek.y
  end
	end
	
	local ix,iy=0,0
	
	if (btn(0)) ix-=1
	if (btn(1)) ix+=1
	if (btn(2)) iy-=1
	if (btn(3)) iy+=1
	
	snek.r+=snek.turn*dt*-ix
	
	local vx,vy=cos(snek.r)*snek.speed,
		sin(snek.r)*snek.speed
		
	if snek.dead then
		vx,vy=0,0
	end
		
	snek.x+=vx*dt
	snek.y+=vy*dt
	
	for a in all(apples) do
		if circhit(snek,a) then
			snek_add_chunk(snek,1)
			a.x,a.y=rnd_apple_pos()
			gm.combo_xp+=gm.apple_score
			local combo=combo_levels[gm.combo_level]
			local score=gm.apple_score*combo.mult
			gm.score+=score
		end
	end
	
	if snek.invul_f<=0 then
		for i=snek.col_idx,#snek.tail do
			if circhit(snek,snek.tail[i]) then
				snek.dead=true
			end
		end
	end
	
	if level_solid(snek.x,snek.y)
	then
		snek.dead=true
	end
end

function _draw()
	cls()

	if false then	
	for x=0,127,8 do
		line(x,0,x,127,5)
	end
	for y=0,127,8 do
		line(0,y,127,y,5)
	end
	
	line(0,63,127,63,6)
	line(63,0,63,127,6)
	end
	
	map(0,0,0,0,16,16)
	
	for a in all(apples) do
		circfill(a.x,a.y,a.rad,8)
	end
	
	local n=#snek.tail
	for i=n,2,-1 do
		local sc=3
		if (i%2==0) sc=11
		line(snek.tail[i].x,
			snek.tail[i].y,
			snek.tail[i-1].x,
			snek.tail[i-1].y,
			sc)
		local c=10
		if (i<snek.col_idx) c=9
--[[		pset(snek.tail[i].x,
			snek.tail[i].y,
			c)]]
--[[		circfill(snek.tail[i].x,
			snek.tail[i].y,
			snek.tail[i].rad,
			11)]]
	end
	line(snek.tail[1].x,
		snek.tail[1].y,
		snek.x,
		snek.y,
		3)
--[[	pset(snek.tail[1].x,
		snek.tail[1].y,
		9)]]
	
	local sx,sy=snek.x,snek.y
--	circfill(sx,sy,snek.rad,11)
	pset(sx,sy,11)
		
--[[	circfill(sx+cos(snek.r)*2,
		sy+sin(snek.r)*2,
		1,
		10)]]
		
	print(gm.score,0,0,7)
	--print(tostr(band(stat(1)*100).."%",0xffff),0,0,7)
	
	if snek.dead then
		print("dead",56,62,8)
	end
end

function dist(x1,y1,x2,y2)
	local dx,dy=x2-x1,y2-y1
	return sqrt(dx*dx+dy*dy)
end

function circhit(c1,c2)
	return dist(c1.x,c1.y,c2.x,c2.y)<=c1.rad+c2.rad
end

function level_solid(x,y)
	return fget(mget(x/8,y/8),0)
end
__gfx__
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000010000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
