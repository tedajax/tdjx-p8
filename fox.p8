pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
function _init()
	pos_x=0
	pos_y=0
	rot=0
	plane_x=0
	plane_y=0.66

	for xx=0,127 do
		for yy=0,63 do
			if mget(xx,yy)==1 then
				pos_x=xx+0.5
				pos_y=yy+0.5
			end
		end
	end
end

function _update()
	local ix,iy=0,0
	if (btn(0)) ix-=1
	if (btn(1)) ix+=1
	if (btn(2)) iy-=1
	if (btn(3)) iy+=1
	
	local drot=-ix/60
	rot+=drot
	local tmp=plane_x
	plane_x=plane_x*cos(drot)-plane_y*sin(drot)
	plane_y=tmp*sin(drot)+plane_y*cos(drot)
	
	local dx,dy=cos(rot),sin(rot)
	pos_x,pos_y=move(
		pos_x,pos_y,-iy*dx/15,-iy*dy/15)
end

function _draw()
	cls(5)
	rectfill(0,0,127,63,13)
	palt(0,false)
	dir_x,dir_y=cos(rot),sin(rot)
	
	for x=0,127 do
		local cam_x=x/64-1
		local ray_dx=
			dir_x+plane_x*cam_x
		local ray_dy=
			dir_y+plane_y*cam_x
			
		local map_x,map_y=flr(pos_x),flr(pos_y)
		local side_dx,side_dy
		local ddx,ddy
		if ray_dx==0 then
			ddx,ddy=1,0
		elseif ray_dy==0 then
			ddx,ddy=0,1
		else
			ddx=abs(1/ray_dx)
			ddy=abs(1/ray_dy)
		end

		local perp_wall_dist
		
		local step_x
		local step_y
		
		local hit=nil
		local side=0
		
		if ray_dx<0 then
			step_x=-1
			side_dx=(pos_x-map_x)*ddx
		else
			step_x=1
			side_dx=(map_x+1-pos_x)*ddx
		end
		if ray_dy<0 then
			step_y=-1
			side_dy=(pos_y-map_y)*ddy
		else
			step_y=1
			side_dy=(map_y+1-pos_y)*ddy
		end
		
		local fail=false
		while not hit and not fail do
			if side_dx<side_dy then
				side_dx+=ddx
				map_x+=step_x
				side=0
			else
				side_dy+=ddy
				map_y+=step_y
				side=1
			end

			local mv=mget(map_x,map_y)
			if fget(mv,0)
			then
				hit=mv
			end
			
			if map_x<0 or map_x>127 or
				map_y<0 or map_y>63
			then
				fail=true
			end
		end
		
		if side==0 then
			perp_wall_dist=(
				map_x-pos_x+(1-step_x)/2)/
				ray_dx
		else
			perp_wall_dist=(
				map_y-pos_y+(1-step_y)/2)/
				ray_dy
		end
		
		local line_height=
			48/perp_wall_dist
			
		local top=64-line_height
		local bot=64+line_height-1
		if side==0 then
			fillp(0xa5a5.8)
		else
			fillp()
		end

		local u=0
		if side==0 then
			u=pos_y+perp_wall_dist*ray_dy
		else
			u=pos_x+perp_wall_dist*ray_dx
		end
		
		u=(u-flr(u))+map_x
		local v=map_y
		local du=0
		local dv=0.5/line_height
		poke(0x5f39,8)
		if not fail then
			tline(x,top,x,bot,u,v,du,dv)
			if btn(4) or side==0 then
				line(x,top,x,bot,0x01)
			end
		end
	end

	palt()
	fillp()

	for xx=0,127 do
		for yy=0,63 do
			if fget(mget(xx,yy),0) then
				pset(xx,yy,8)
			end
		end
	end
	pset(pos_x,pos_y,11)
	pset(pos_x+cos(rot),
		pos_y+sin(rot),7)
end
-->8
function solid(x,y)
	return fget(mget(x,y),0)
end

function move(x,y,dx,dy)
	local scan=0.125
	local sdx,sdy=scan*dx,scan*dy
	
	while solid(x+dx,y+dy) and
		(dx>0 or dy>0)
	do
		dx-=sdx
		dy-=sdy
		if sqrt(dx*dx+dy*dy)<scan then
			dx,dy=0,0
			break
		end
	end
	
	return x+dx,y+dy
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000bbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000bbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000bbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000bbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc1cc1c225522255776657688858885666296664444949400000000000000000000000000000000000000000000000000000000000000000000000000000000
ccc1cc1c222222225766556655555555566266654494949900000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111222222225566555585888588822222284494999400000000000000000000000000000000000000000000000000000000000000000000000000000000
c1ccc1cc522222255555577655555555562222659444949400000000000000000000000000000000000000000000000000000000000000000000000000000000
c11111cc252222225777576688858885829229259494949400000000000000000000000000000000000000000000000000000000000000000000000000000000
c1ccc1cc222222225666555555555555566226659499949900000000000000000000000000000000000000000000000000000000000000000000000000000000
11ccc111222225227666577685888588852662889994999400000000000000000000000000000000000000000000000000000000000000000000000000000000
c1ccc1cc525522256655556655555555555665559494949400000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1015151510101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1515151500000012001515100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000012000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000011000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000010000000014000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000013000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1000000000000013101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010131313131310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
